'***********************************************************************************************************
'			Code for controlling Tibbit #57 (FPGA Tibbit) in smart LED (SLED) configuration 
'***********************************************************************************************************

include "global.tbh"

'--------------------------------------------------------------------
const SLED_STAMP="SLED> "
const SLED_CR_LF=chr(13)+chr(10)

'--------------------------------------------------------------------
#if SLED_DEBUG_PRINT=1
	declare sub sled_debug_print(data as string)
#endif

'--------------------------------------------------------------------
dim spi_num_tbt57 as byte

'====================================================================
function tbt57_sled_init()as tbt57_errcheck
'Call this function to initialize the Tibbit (start the FPGA and load it with the SPI-to-SK6812RGBW protocol converter).
'The function relies on tbt57_init() - a universal function for initializing the FPGA tibbit.
'For correct operation, "RGBW_Driver_top_bitmap" file must be added to the project.

	dim delay as byte
	dim s as string
	dim x as byte
	dim f as word
	
	#if SLED_DEBUG_PRINT=1
		sled_debug_print("Starting configuration...")
	#endif
	
	'the following will set correct SSI channel number in spi_num_tbt57
	tbt57_sled_init=tbt57_init("RGBW_Driver_top_bitmap.bin",spi_num_tbt57)
	select case tbt57_sled_init
	case TBT57_OK:
		#if SLED_DEBUG_PRINT=1
			sled_debug_print("FPGA configured")
		#endif
	
	case TBT57_FILE_NOT_ATTACHED:
		#if SLED_DEBUG_PRINT=1
			sled_debug_print("FPGA configuration file not attached or empty")
		#endif
	
	case TBT57_INIT_FAILURE:
		#if SLED_DEBUG_PRINT=1
			sled_debug_print("FPGA configuration failure")
		#endif
		
	case TBT57_NO_SSI_AVAILABLE:
		#if SLED_DEBUG_PRINT=1
			sled_debug_print("No free SSI channel available.")
		#endif
		
	end select
	
end function

sub tbt57_sled_data_start() 
'Call this function to start a new SPI transaction, thus resetting the FPGA internal buffer pointer.
'After that, call tbt57_sled_send_byte() and/or tbt57_sled_send_string() to send the LED data into the buffer. FPGA buffer can hold up to 8192 bytes of data.
'RGBW LEDs have 4 bytes per LED, the order of bytes is G, R, B, W. RGB LEDs have 3 bytes per LED (G, R, B).
'To finish the upload cycle and display the data call tbt57_sled_end_and_display().

	io.lineset(TBT57_SPI_CS,LOW)
	ssi.channel=spi_num_tbt57
end sub

sub tbt57_sled_send_byte(dt as byte)
'Sends one byte into the FPGA's memory buffer. The buffer pointer auto-increments with each byte sent. Buffer capacity is 8192 bytes.
'tbt57_sled_data_start() must be invoked prior to calling this sub.
	ssi.value(dt,8)
end sub

sub tbt57_sled_send_string(byref s as string)
'Sends a string of byte values into the FPGA's memory buffer. The buffer pointer auto-increments with each byte sent. Buffer capacity is 8192 bytes.
'tbt57_sled_data_start() must be invoked prior to calling this sub.
	ssi.str(s,PL_SSI_ACK_OFF)
end sub

sub tbt57_sled_end_and_display()
'Calling this procedure concludes the SPI transaction (data upload into the FPGA), and instructs the FPGA to send the data to the LED chain.
'After the data is sent, all LEDs in the chain are strobed to update their states (brightness levels of R, G, B, and W channels).
'The FPGA is busy while the LED update is in progress. Use tbt57_sled_check_ready() to check if the FPGA is ready for the next SPI transaction.
	io.lineset(TBT57_SPI_CS,HIGH)
end sub

function tbt57_sled_check_ready() as no_yes
'Returns NO if the FPGA is busy updating LEDs, or YES if the FPGA is idle.
'This call will only return a meaningful value if invoked outside an SPI transaction, i.e. after calling tbt57_sled_end_and_display().
'Wait until tbt57_sled_check_ready() returns YES before starting new SPI transaction with tbt57_sled_data_start(). 
	tbt57_sled_check_ready=io.lineget(TBT57_SPI_MISO)
end function

#if SLED_DEBUG_PRINT=1
sub sled_debug_print(data as string)
	sys.debugprint(SLED_STAMP+data+SLED_CR_LF)
end sub
#endif
